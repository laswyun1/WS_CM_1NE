

#include "WS_dev_mngr.h"

#ifdef WALKON5_CM_ENABLED

/**
 *-----------------------------------------------------------
 *              TYPE DEFINITIONS AND ENUMERATIONS
 *-----------------------------------------------------------
 * @brief Enumerated types and structures central to this module.
 */




/**
 *------------------------------------------------------------
 *                      GLOBAL VARIABLES
 *------------------------------------------------------------
 * @brief Variables accessible throughout the application.
 */

MD_Obj md_obj[MD_NUM];


DOPI_SDOMsg_t sdo_msg;
DOPI_PDOMsg_t pdo_msg;

DOPI_PDOUnit_t pdo_unit;

extern RobotSettingFileInfo RS_File;

int ListPDO_size = 5;
uint8_t ListPDO[10] = {
		//TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_LOOP_CNT,
//        TASK_ID_LOWLEVEL,  PDO_ID_LOWLEVEL_REF_CURRENT,
//        TASK_ID_LOWLEVEL,  PDO_ID_LOWLEVEL_ACTUAL_CURRENT,
//        TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_REF_POSITION,
//        TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_ACTUAL_POSITION,
		//TASK_ID_LOWLEVEL,  PDO_ID_LOWLEVEL_POSITION,
		TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_ACTUAL_POSITION,
		TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_REF_POSITION,
};

int16_t quatVal[4] = {0};
float grfVal[9] = {0};

/**
 *------------------------------------------------------------
 *                      STATIC VARIABLES
 *------------------------------------------------------------
 * @brief Variables local to this module.
 */




/**
 *------------------------------------------------------------
 *                 STATIC FUNCTION PROTOTYPES
 *------------------------------------------------------------
 * @brief Static Function prototypes for this module.
 */

static void SetupDOD(MD_Obj* obj);

static int TxSDO(int MD_idx);
static int TxPDO(int MD_idx);

static void SetRoutine(MD_TaskData* task_obj, uint8_t routine_id);
static void ClearRoutine(MD_TaskData* task_obj);

static void StandbyStates(int MD_idx);
static void EnableStates(int MD_idx);
static void OffStates(int MD_idx);

static void SetMDRoutines(int MD_idx);
static void SetMDEnables(int MD_idx);

static int FDCAN_Callback(uint16_t wasp_id, uint8_t* rx_data);


/**
 *------------------------------------------------------------
 *                      PUBLIC FUNCTIONS
 *------------------------------------------------------------
 * @brief Functions that interface with this module.
 */

void All_MD_Init()
{
	uint8_t is_md_init = 0;

	if (is_md_init == 0) {
        /* FDCAN Init */
		IOIF_InitFDCAN1(NODE_ID_CM);
        IOIF_InitFDCAN2(NODE_ID_CM);

    	/* Allocate RX Callback*/
		IOIF_SetFDCANRxCB(IOIF_FDCAN1, IOIF_FDCAN_RXFIFO0CALLBACK, FDCAN_Callback);
        IOIF_SetFDCANRxCB(IOIF_FDCAN2, IOIF_FDCAN_RXFIFO0CALLBACK, FDCAN_Callback);

		/* Driver Init */
		for (int MD_idx = 0; MD_idx < MAX_N_MD; MD_idx++)
		{
			uint8_t t_usage = RS_File.MD_setting[MD_idx].usage;
			if (t_usage == 1)
			{
				uint16_t t_md_fdcan_id = RS_File.MD_setting[MD_idx].FDCAN_ID;
				uint8_t  t_md_fdcan_ch = RS_File.MD_setting[MD_idx].FDCAN_CH;

				FDCAN_TxFncPtr txfnc;

				if      (t_md_fdcan_ch == 1)
				{
					txfnc = IOIF_TransmitFDCAN1;
				}
				else if (t_md_fdcan_ch == 2)
				{
					txfnc = IOIF_TransmitFDCAN2;
				}
				else
				{
					//error handler
				}

				md_obj[MD_idx].tx_id  = 0x200 | (NODE_ID_CM << 4) | t_md_fdcan_id;
				md_obj[MD_idx].tx_fnc = txfnc;

				memset(&md_obj[MD_idx].data, 0, sizeof(md_obj[MD_idx].data));
				DOPI_InitDevObj(&md_obj[MD_idx].bb, t_md_fdcan_id);
				SetupDOD(&md_obj[MD_idx]);
			}
		}
		is_md_init = 1;
	}
}

/*******************************************************************/
void All_MD_OffStates(void)
{
	for (int MD_idx = 0; MD_idx < MAX_N_MD; MD_idx++)
	{
		if (RS_File.MD_setting[MD_idx].usage == 1)
		{
			OffStates(MD_idx);
		}
	}
}

void All_MD_StandbyStates(void)
{
	for (int MD_idx = 0; MD_idx < MAX_N_MD; MD_idx++)
	{
		if (RS_File.MD_setting[MD_idx].usage == 1)
		{
			StandbyStates(MD_idx);
		}
	}
}

void All_MD_EnableStates(void)
{
	for (int MD_idx = 0; MD_idx < MAX_N_MD; MD_idx++)
	{
		if (RS_File.MD_setting[MD_idx].usage == 1)
		{
			EnableStates(MD_idx);
		}
	}
}

MD_Data* MD_GetDataset(int obj_idx)
{
    return &md_obj[obj_idx].data;
}

void Send_Auxilirary_Input(int MD_idx, float aux_input)
{
    DOPI_PDOUnit_t pdo_unit;
    DOPI_ClearPDO(&pdo_msg);

    md_obj[MD_idx].data.aux_input = aux_input;

    pdo_unit = DOPI_CreatePDOUnit(TASK_ID_LOWLEVEL, PDO_ID_LOWLEVEL_AUXILIARY_INPUT, &md_obj[MD_idx].data.aux_input);
    DOPI_AppendPDO(&pdo_unit, &pdo_msg);

    TxPDO(MD_idx);
}

void Send_Target_Current(int MD_idx, float target_current)
{
    DOPI_PDOUnit_t pdo_unit;
    DOPI_ClearPDO(&pdo_msg);

    md_obj[MD_idx].data.current_ref = target_current;

    pdo_unit = DOPI_CreatePDOUnit(TASK_ID_LOWLEVEL, PDO_ID_LOWLEVEL_TOTAL_CURRENT_INPUT, &md_obj[MD_idx].data.current_ref);
    DOPI_AppendPDO(&pdo_unit, &pdo_msg);

    TxPDO(MD_idx);
}

void Send_Target_Position(int MD_idx, float target_position)
{
    DOPI_PDOUnit_t pdo_unit;
    DOPI_ClearPDO(&pdo_msg);

    md_obj[MD_idx].data.position_ref = target_position;

    pdo_unit = DOPI_CreatePDOUnit(TASK_ID_MIDLEVEL, PDO_ID_MIDLEVEL_REF_POSITION, &md_obj[MD_idx].data.target_position);
    DOPI_AppendPDO(&pdo_unit, &pdo_msg);

    TxPDO(MD_idx);
}

/******************* (DEMO) ***********************/
// Set MD Peak Current
void Set_Peak_Limit_DR(int obj_idx, float max_peak_current)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.peakCurr_limit_DR = max_peak_current;

    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

// Set MD Continuous Current
void Set_Continu_Limit_DR(int obj_idx, float max_cont_current)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.contCurr_limit_DR = max_cont_current;

    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_All_MD_Continu_Limit_DR(void)
{
	Set_Continu_Limit_DR(MD_IDX_RH_COR,13);
	Set_Continu_Limit_DR(MD_IDX_LH_COR,13);
	Set_Continu_Limit_DR(MD_IDX_RH_SAG,13);
	Set_Continu_Limit_DR(MD_IDX_LH_SAG,13);
	Set_Continu_Limit_DR(MD_IDX_RK,13);
	Set_Continu_Limit_DR(MD_IDX_LK,13);
}

void Set_IncEncoder_Init_Angle(int obj_idx, float t_angle)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.initial_angle = t_angle;

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, 	SDO_ID_MIDLEVEL_DESIRED_MECH_ANGLE, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}


void Set_Kp(int obj_idx, float t_Kp)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.Kp = t_Kp;

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, 	SDO_ID_MIDLEVEL_POSITION_CTRL_P_GAIN, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_Kd(int obj_idx, float t_Kd)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.Kd = t_Kd;

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, 	SDO_ID_MIDLEVEL_POSITION_CTRL_D_GAIN, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}


void Set_J(int obj_idx, float t_J)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.J = t_J;

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_LOWLEVEL, 	SDO_ID_LOWLEVEL_INERTIA, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_B(int obj_idx, float t_B)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.B = t_B;

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_LOWLEVEL, 	SDO_ID_LOWLEVEL_DAMPING_COEF, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_Mu_C(int obj_idx, float mu_c)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.mu_c = mu_c;

        DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_Mu_V(int obj_idx, float mu_v)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.mu_v = mu_v;

    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_Mu_G(int obj_idx, float mu_g)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.mu_g = mu_g;

        DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_IRC_J_Gain(int obj_idx, float t_gain)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    if       (t_gain > +1) t_gain = +1;
    else if  (t_gain < -1) t_gain = -1;

    md_obj[obj_idx].data.IRC_J_gain = t_gain;

        DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_IRC_B_Gain(int obj_idx, float t_gain)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    if       (t_gain > +1) t_gain = +1;
    else if  (t_gain < -1) t_gain = -1;

    md_obj[obj_idx].data.IRC_B_gain = t_gain;

    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_Velocity_Periodic_Sig_Amp(int obj_idx, float t_amp)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.velocity_periodic_sig_amp = t_amp;

        DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_Velocity_Periodic_Sig_Freq(int obj_idx, float t_freq)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.velocity_periodic_sig_freq = t_freq;

        DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_Current_Periodic_Sig_Amp(int obj_idx, float t_amp)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.current_periodic_sig_amp = t_amp;

        DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_Current_Periodic_Sig_Freq(int obj_idx, float t_freq)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.current_periodic_sig_freq = t_freq;

    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_Noise_Magnitude(int obj_idx, float t_mag)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    float t_mag_conv;

    t_mag_conv = pow(10, ((80+t_mag)/20));

    md_obj[obj_idx].data.noise_magnitude = t_mag_conv;

    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_ID_Mode(int obj_idx)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    /*(1) Set Low-Level Routines */
    SetRoutine(&md_obj[obj_idx].data.task_lowlevel, ROUTINE_ID_LOWLEVEL_CURRENT_CTRL);

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_SET_ROUTINE, SDO_REQU,
    md_obj[obj_idx].data.task_lowlevel.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    /*(2) Set Mid-Level Routines */
        SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_POSITION_CTRL);
    SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_DISTURBANCE_OBS);

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_SET_ROUTINE, SDO_REQU, md_obj[obj_idx].data.task_midlevel.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_ID_Msg(int obj_idx)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    /*(3) Set MSG Routines */
    SetRoutine(&md_obj[obj_idx].data.task_msg, ROUTINE_ID_MSG_PDO_SEND);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MSG, SDO_ID_MSG_SET_ROUTINE, SDO_REQU,
        md_obj[obj_idx].data.task_msg.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    int     t_ListPDO_size = 6;
    uint8_t t_ListPDO[12]  = {
    		TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_REF_POSITION,
    		TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_ACTUAL_POSITION,
			TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_LOOP_CNT,
            };
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MSG, SDO_ID_MSG_PDO_LIST, SDO_REQU, t_ListPDO_size);
    sdo_unit.param.data = t_ListPDO;

    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_Pos_Fix_Mode(int obj_idx)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    /*(1) Set Low-Level Routines */
    SetRoutine(&md_obj[obj_idx].data.task_lowlevel, ROUTINE_ID_LOWLEVEL_CURRENT_CTRL);

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_SET_ROUTINE, SDO_REQU,
    md_obj[obj_idx].data.task_lowlevel.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    /*(2) Set Mid-Level Routines */
    SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_POSITION_CTRL);
    SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_DISTURBANCE_OBS);

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_SET_ROUTINE, SDO_REQU, md_obj[obj_idx].data.task_midlevel.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    /*(3) Set MSG Routines */
    SetRoutine(&md_obj[obj_idx].data.task_msg, ROUTINE_ID_MSG_PDO_SEND);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MSG, SDO_ID_MSG_SET_ROUTINE, SDO_REQU,
        md_obj[obj_idx].data.task_msg.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    int     t_ListPDO_size = 3;
    uint8_t t_ListPDO[6]  = {
    		TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_REF_POSITION,
    		TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_ACTUAL_POSITION,
            };
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MSG, SDO_ID_MSG_PDO_LIST, SDO_REQU, t_ListPDO_size);
    sdo_unit.param.data = t_ListPDO;

    DOPI_AppendSDO(&sdo_unit, &sdo_msg);
    TxSDO(obj_idx);
}

void Set_Adv_Friction_Compensation_Mode(int obj_idx)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    /*(1) Set Low-Level Routines */
    SetRoutine(&md_obj[obj_idx].data.task_lowlevel, ROUTINE_ID_LOWLEVEL_CURRENT_CTRL);
    SetRoutine(&md_obj[obj_idx].data.task_lowlevel, ROUTINE_ID_LOWLEVEL_ADV_FRICTION_COMPENSATION);

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_SET_ROUTINE, SDO_REQU,
    md_obj[obj_idx].data.task_lowlevel.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    /*(2) Set Mid-Level Routines */


    /*(3) Set MSG Routines */

    TxSDO(obj_idx);
}

void Set_Friction_Compensation_Mode(int obj_idx)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    /*(1) Set Low-Level Routines */
    SetRoutine(&md_obj[obj_idx].data.task_lowlevel, ROUTINE_ID_LOWLEVEL_CURRENT_CTRL);

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_SET_ROUTINE, SDO_REQU,
    md_obj[obj_idx].data.task_lowlevel.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    /*(2) Set Mid-Level Routines */


	/*(3) Set MSG Routines */
    SetRoutine(&md_obj[obj_idx].data.task_msg, ROUTINE_ID_MSG_PDO_SEND);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MSG, SDO_ID_MSG_SET_ROUTINE, SDO_REQU,
        md_obj[obj_idx].data.task_msg.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    int     t_ListPDO_size = 2;
    uint8_t t_ListPDO[4]  = {
    		TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_ACTUAL_POSITION,
    };

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MSG, SDO_ID_MSG_PDO_LIST, SDO_REQU, t_ListPDO_size);
    sdo_unit.param.data = t_ListPDO;
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Activate_MD_Msg_Hdlr_task(int MD_idx)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

	/*(1) Set MSG Routines */
    SetRoutine(&md_obj[MD_idx].data.task_msg, ROUTINE_ID_MSG_PDO_SEND);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_MSG,      SDO_ID_MSG_SET_ROUTINE,      SDO_REQU, md_obj[MD_idx].data.task_msg.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    /*(2) Set MSG PDO */
    uint8_t    t_ListPDO_size = 9;
    uint8_t t_ListPDO[18]  = {
    		TASK_ID_GAIT, 	   PDO_ID_GAIT_QUATERNION,

//    	    TASK_ID_GRF,	   PDO_ID_GRF_S2X,
    		TASK_ID_GRF,	   PDO_ID_GRF_S2Y,
    		TASK_ID_GRF,	   PDO_ID_GRF_S2Z,

    	    TASK_ID_GRF,	   PDO_ID_GRF_S3X,
    		TASK_ID_GRF,	   PDO_ID_GRF_S3Y,
    		TASK_ID_GRF,	   PDO_ID_GRF_S3Z,

    	    TASK_ID_GRF,	   PDO_ID_GRF_S4X,
    		TASK_ID_GRF,	   PDO_ID_GRF_S4Y,
    		TASK_ID_GRF,	   PDO_ID_GRF_S4Z,
    };

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_MSG,      SDO_ID_MSG_PDO_LIST,         SDO_REQU,  t_ListPDO_size);
    sdo_unit.param.data = t_ListPDO;
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[MD_idx].data.task_msg.state = TASK_STATE_ENABLE;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_MSG,      SDO_ID_MSG_SET_STATE,      SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(MD_idx);
}


void Activate_All_MD_Msg_Hdlr_task()
{
	for (int MD_idx = 0; MD_idx < MAX_N_MD; MD_idx++) {
		if (RS_File.MD_setting[MD_idx].usage == 1) {
			Activate_MD_Msg_Hdlr_task(MD_idx);
		}
	}
}

void Set_MD_Position_Ctrl_Routines(int obj_idx)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    /*(1) Set Low-Level Routines */
    SetRoutine(&md_obj[obj_idx].data.task_lowlevel, ROUTINE_ID_LOWLEVEL_CURRENT_CTRL);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_SET_ROUTINE, SDO_REQU, md_obj[obj_idx].data.task_lowlevel.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    /*(2) Set Mid-Level Routines */
    SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_P_VECTOR_DECODER);
    SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_POSITION_CTRL);
    SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_DISTURBANCE_OBS);
    SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_FEEDFORWARD_FILTER);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_SET_ROUTINE, SDO_REQU, md_obj[obj_idx].data.task_midlevel.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

	/*(3) Set MSG Routines */
/*    SetRoutine(&md_obj[obj_idx].data.task_msg, ROUTINE_ID_MSG_PDO_SEND);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MSG,      SDO_ID_MSG_SET_ROUTINE,      SDO_REQU, md_obj[obj_idx].data.task_msg.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);*/

    /*(4) Set IMU Routines */
    SetRoutine(&md_obj[obj_idx].data.task_imu, ROUTINE_ID_IMU_QUATERNION);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_IMU,      SDO_ID_IMU_SET_ROUTINE,      SDO_REQU, md_obj[obj_idx].data.task_imu.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

/*    int     t_ListPDO_size = 6;
    uint8_t t_ListPDO[12]  = {
    		TASK_ID_LOWLEVEL,  PDO_ID_LOWLEVEL_CURRENT_OUTPUT,
    		TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_LOOP_CNT,
    		TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_REF_POSITION,
			TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_ACTUAL_POSITION,
			TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_ABS_POSITION,
			TASK_ID_IMU,       PDO_ID_IMU_QUATERNION,
    };

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MSG,      SDO_ID_MSG_PDO_LIST,         SDO_REQU, t_ListPDO_size);
    sdo_unit.param.data = t_ListPDO;
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);*/

    TxSDO(obj_idx);
}

void Set_MD_Current_Ctrl_Routines(int obj_idx)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    /*(1) Set Low-Level Routines */
    SetRoutine(&md_obj[obj_idx].data.task_lowlevel, ROUTINE_ID_LOWLEVEL_CURRENT_CTRL);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_SET_ROUTINE, SDO_REQU, md_obj[obj_idx].data.task_lowlevel.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    /*(2) Set Mid-Level Routines */
   /* SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_P_VECTOR_DECODER);
    SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_POSITION_CTRL);
    SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_DISTURBANCE_OBS);
    SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_FEEDFORWARD_FILTER);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_SET_ROUTINE, SDO_REQU, md_obj[obj_idx].data.task_midlevel.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);*/

	/*(3) Set MSG Routines */
/*    SetRoutine(&md_obj[obj_idx].data.task_msg, ROUTINE_ID_MSG_PDO_SEND);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MSG,      SDO_ID_MSG_SET_ROUTINE,      SDO_REQU, md_obj[obj_idx].data.task_msg.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);*/

    /*(4) Set IMU Routines */
/*
    SetRoutine(&md_obj[obj_idx].data.task_imu, ROUTINE_ID_IMU_QUATERNION);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_IMU,      SDO_ID_IMU_SET_ROUTINE,      SDO_REQU, md_obj[obj_idx].data.task_imu.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);
*/

    TxSDO(obj_idx);
}

void Set_All_MD_Position_Ctrl_Routines()
{
	Set_MD_Position_Ctrl_Routines(MD_IDX_RH_COR);
	Set_MD_Position_Ctrl_Routines(MD_IDX_LH_COR);
	Set_MD_Position_Ctrl_Routines(MD_IDX_RH_SAG);
	Set_MD_Position_Ctrl_Routines(MD_IDX_LH_SAG);
	Set_MD_Position_Ctrl_Routines(MD_IDX_RK);
	Set_MD_Position_Ctrl_Routines(MD_IDX_LK);
	Set_MD_Position_Ctrl_Routines(MD_IDX_RA_MED);
	Set_MD_Position_Ctrl_Routines(MD_IDX_LA_MED);
	Set_MD_Position_Ctrl_Routines(MD_IDX_RA_LAT);
	Set_MD_Position_Ctrl_Routines(MD_IDX_LA_LAT);
}

void Set_MD_Impedance_Ctrl_Routines(int obj_idx)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    /*(1) Set Low-Level Routines */
    SetRoutine(&md_obj[obj_idx].data.task_lowlevel, ROUTINE_ID_LOWLEVEL_CURRENT_CTRL);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_SET_ROUTINE, SDO_REQU, md_obj[obj_idx].data.task_lowlevel.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    /*(2) Set Mid-Level Routines */
    SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_P_VECTOR_DECODER);
    SetRoutine(&md_obj[obj_idx].data.task_midlevel, ROUTINE_ID_MIDLEVEL_CORRIDOR_IMPEDANCE_CONTROL);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_SET_ROUTINE, SDO_REQU, md_obj[obj_idx].data.task_midlevel.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

	/*(3) Set MSG Routines */
    SetRoutine(&md_obj[obj_idx].data.task_msg, ROUTINE_ID_MSG_PDO_SEND);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MSG,      SDO_ID_MSG_SET_ROUTINE,      SDO_REQU, md_obj[obj_idx].data.task_msg.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    /*(4) Set IMU Routines */
    SetRoutine(&md_obj[obj_idx].data.task_imu, ROUTINE_ID_IMU_QUATERNION);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_IMU,      SDO_ID_IMU_SET_ROUTINE,      SDO_REQU, md_obj[obj_idx].data.task_imu.n_routines);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    int     t_ListPDO_size = 6;
    uint8_t t_ListPDO[12]  = {
    		TASK_ID_LOWLEVEL,  PDO_ID_LOWLEVEL_CURRENT_OUTPUT,
    		TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_LOOP_CNT,
    		TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_REF_POSITION,
			TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_ACTUAL_POSITION,
			TASK_ID_MIDLEVEL,  PDO_ID_MIDLEVEL_ABSENCODER1_POSITION,
			TASK_ID_IMU,       PDO_ID_IMU_QUATERNION,
    };

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MSG,      SDO_ID_MSG_PDO_LIST,         SDO_REQU, t_ListPDO_size);
    sdo_unit.param.data = t_ListPDO;
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

// Here is for Resoure Test
void Send_Elapsed_Time(int obj_idx, uint32_t control_time, uint32_t comm_time)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.ControlLoopTime  = control_time;
    md_obj[obj_idx].data.CommLoopTime     = comm_time;

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_TEST_CONTROL_TIME, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_TEST_COMM_TIME, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

// function description: send controller gain vector to MD
// param1: MD ID
// param2: desired feed-forward controller gain        [0,255] in CM = [0, 1] in MD
// param3: desired PD position controller gain         [0,255] in CM = [0, 1] in MD
// param4: desired Impedance controller gain           [0,255] in CM = [0, 1] in MD
// param5: desired Disturbance observer gain           [0,255] in CM = [0, 1] in MD
// param5: desired Impedance reduction controller gain [0,255] in CM = [0, 1] in MD
// param6: desired Friction compensator gain           [0,255] in CM = [0, 1] in MD
void Send_C_Vector(int obj_idx, uint8_t K_FF, uint8_t K_PD, uint8_t K_IC, uint8_t K_DOB, uint8_t K_IRC, uint8_t K_FC)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.c_vector.FF_gain  = K_FF;
    md_obj[obj_idx].data.c_vector.PD_gain  = K_PD;
    md_obj[obj_idx].data.c_vector.IC_gain  = K_IC;
    md_obj[obj_idx].data.c_vector.DOB_gain = K_DOB;
    md_obj[obj_idx].data.c_vector.IRC_gain = K_IRC;
    md_obj[obj_idx].data.c_vector.FC_gain  = K_FC;

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_C_VECTOR_FF_GAIN, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_C_VECTOR_PD_GAIN, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_C_VECTOR_IC_GAIN, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_C_VECTOR_DOB_GAIN, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_C_VECTOR_IRC_GAIN, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_C_VECTOR_FC_GAIN, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

// function description: send P-vector to MD
// param1: MD ID
// param2: desired position (unit: deg)
// param3: duration         (unit: ms)
// param4: normalized acceleration (unit: deg/s^2)
// param5: normalized deceleration (unit: deg/s^2)
void Send_P_Vector(int obj_idx, float yd, uint16_t L, uint8_t s0, uint8_t sd)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.p_vector.yd = 8.726646259971647 * yd;  // = 8.726646259971647 = M_PI*500 /180; (tx: x500, rx: x0.002)

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_P_VECTOR_YD, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[obj_idx].data.p_vector.L = L;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_P_VECTOR_L, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[obj_idx].data.p_vector.s0 = s0;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_P_VECTOR_S0, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[obj_idx].data.p_vector.sd = sd;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_P_VECTOR_SD, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

// function description: send F-vector to MD
// param1: MD ID
// param2: torque mode idx (unit: -)
// param3: maximum torque  (unit: A)
// param4: delay           (unit: ms)
void Send_F_Vector(int obj_idx, uint8_t mode_idx, float max_torque, uint16_t delay)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.f_vector.mode_idx = mode_idx;

    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_F_VECTOR_MODE_IDX, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[obj_idx].data.f_vector.tau_max = (int16_t)(max_torque*100);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_F_VECTOR_TMAX, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[obj_idx].data.f_vector.delay = delay;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_F_VECTOR_DELAY, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

// function description: send impedance controller setting to MD
// param1: MD ID
// param2: Half width of the Corridor      (unit: deg)
// param3: Magnitude of the Virtual Spring (unit: %)
// param4: Magnitude of the Virtual Damper (unit: %)
// param5: Impedance Ratio in the Corridor (0~2)
// param6: Duration for Transition         (unit: ms for dT = 1ms)
void Send_I_Vector(int obj_idx, float t_epsilon, float t_Kp, float t_Kd, float t_lambda, uint16_t duration)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.i_vector.epsilon_target = (uint8_t)(10 * t_epsilon);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_EPSILON, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[obj_idx].data.i_vector.Kp_target = (uint8_t)(2.55 * t_Kp);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_KP, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[obj_idx].data.i_vector.Kd_target = (uint8_t)(2.55 * t_Kd);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_KD, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[obj_idx].data.i_vector.lambda_target = (uint8_t)(100 * t_lambda);
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_LAMBDA, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[obj_idx].data.i_vector.duration = duration;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_DURATION, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(obj_idx);
}

void Set_I_Vector_Kp_Max(int obj_idx, float Kp_max)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.i_vector_Kp_max = Kp_max;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_KP_MAX, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);
    TxSDO(obj_idx);
}

void Set_I_Vector_Kd_Max(int obj_idx, float Kd_max)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[obj_idx].data.i_vector_Kd_max = Kd_max;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_KD_MAX, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);
    TxSDO(obj_idx);
}


/**
 *------------------------------------------------------------
 *                      STATIC FUNCTIONS
 *------------------------------------------------------------
 * @brief Functions intended for internal use within this module.
 */

/* Setup & Init */
static void SetupDOD(MD_Obj* obj)
{
    /* LOW LEVEL */
    // SDO
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_SET_STATE,   &obj->data.task_lowlevel.state);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_SET_ROUTINE, obj->data.task_lowlevel.routines);

	DOPI_SetSDOAddr(&obj->bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_PEAK_CURRENT_LIMIT,       &obj->data.peakCurr_limit_DR);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_CONTINUOUS_CURRENT_LIMIT, &obj->data.contCurr_limit_DR);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_INERTIA,                     &obj->data.J);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_DAMPING_COEF,                &obj->data.B);

	// PDO

	DOPI_SetPDOAddr(&obj->bb, TASK_ID_LOWLEVEL, PDO_ID_LOWLEVEL_TOTAL_CURRENT_INPUT, &obj->data.current_ref);
	DOPI_SetPDOAddr(&obj->bb, TASK_ID_LOWLEVEL, PDO_ID_LOWLEVEL_CURRENT_OUTPUT,      &obj->data.current_act);
	DOPI_SetPDOAddr(&obj->bb, TASK_ID_LOWLEVEL, PDO_ID_LOWLEVEL_AUXILIARY_INPUT,     &obj->data.aux_input);
    /* MID LEVEL */
    // SDO
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_SET_STATE,      &obj->data.task_midlevel.state);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_SET_ROUTINE,     obj->data.task_midlevel.routines);

	/*20230420***************/
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_IMP_VIRTUAL_STIFFNESS,      &obj->data.Kp);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_IMP_VIRTUAL_DAMPER,         &obj->data.Kd);

	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_C_VECTOR_FF_GAIN,    &obj->data.c_vector.FF_gain);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_C_VECTOR_PD_GAIN,    &obj->data.c_vector.PD_gain);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_C_VECTOR_IC_GAIN,    &obj->data.c_vector.IC_gain);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_C_VECTOR_DOB_GAIN,   &obj->data.c_vector.DOB_gain);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_C_VECTOR_IRC_GAIN,   &obj->data.c_vector.IRC_gain);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_C_VECTOR_FC_GAIN,    &obj->data.c_vector.FC_gain);

	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_P_VECTOR_YD,         &obj->data.p_vector.yd);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_P_VECTOR_L,          &obj->data.p_vector.L);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_P_VECTOR_S0,         &obj->data.p_vector.s0);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_P_VECTOR_SD,         &obj->data.p_vector.sd);

	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_F_VECTOR_MODE_IDX,   &obj->data.f_vector.mode_idx);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_F_VECTOR_TMAX,       &obj->data.f_vector.tau_max);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_F_VECTOR_DELAY,      &obj->data.f_vector.delay);

	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_EPSILON,    &obj->data.i_vector.epsilon_target);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_KP,         &obj->data.i_vector.Kp_target);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_KD,         &obj->data.i_vector.Kd_target);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_LAMBDA,     &obj->data.i_vector.lambda_target);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_DURATION,   &obj->data.i_vector.duration);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_KP_MAX,     &obj->data.i_vector_Kp_max);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_I_VECTOR_KD_MAX,     &obj->data.i_vector_Kd_max);

	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_DESIRED_MECH_ANGLE,  &obj->data.initial_angle);

	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_TEST_CONTROL_TIME,  &obj->data.ControlLoopTime);
	DOPI_SetSDOAddr(&obj->bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_TEST_COMM_TIME   ,  &obj->data.CommLoopTime);

    // PDO
	DOPI_SetPDOAddr(&obj->bb, TASK_ID_MIDLEVEL, PDO_ID_MIDLEVEL_REF_POSITION,    &obj->data.position_ref);
	DOPI_SetPDOAddr(&obj->bb, TASK_ID_MIDLEVEL, PDO_ID_MIDLEVEL_ACTUAL_POSITION, &obj->data.inc_actual_position);
	DOPI_SetPDOAddr(&obj->bb, TASK_ID_MIDLEVEL, PDO_ID_MIDLEVEL_ABSENCODER1_POSITION,    &obj->data.abs1_actual_position);
	DOPI_SetPDOAddr(&obj->bb, TASK_ID_MIDLEVEL, PDO_ID_MIDLEVEL_ABSENCODER2_POSITION,    &obj->data.abs2_actual_position);

	DOPI_SetPDOAddr(&obj->bb, TASK_ID_MIDLEVEL, PDO_ID_MIDLEVEL_REF_VELOCITY,    &obj->data.target_velocity);
	DOPI_SetPDOAddr(&obj->bb, TASK_ID_MIDLEVEL, PDO_ID_MIDLEVEL_LOOP_CNT,        &obj->data.md2cm_index);

    /* MESSAGE */
    // SDO
    DOPI_SetSDOAddr(&obj->bb, TASK_ID_MSG, SDO_ID_MSG_SET_STATE,        &obj->data.task_msg.state);
    DOPI_SetSDOAddr(&obj->bb, TASK_ID_MSG, SDO_ID_MSG_SET_ROUTINE,      obj->data.task_msg.routines);

    DOPI_SetSDOAddr(&obj->bb, TASK_ID_MSG, SDO_ID_MSG_PDO_LIST,    ListPDO);


    /* GRF */
    DOPI_SetPDOAddr(&obj->bb, TASK_ID_GAIT, PDO_ID_GAIT_QUATERNION,    &quatVal[0]);

    DOPI_SetPDOAddr(&obj->bb, TASK_ID_GRF, PDO_ID_GRF_S2X,    &grfVal[0]);
    DOPI_SetPDOAddr(&obj->bb, TASK_ID_GRF, PDO_ID_GRF_S2Y,    &grfVal[1]);
    DOPI_SetPDOAddr(&obj->bb, TASK_ID_GRF, PDO_ID_GRF_S2Z,    &grfVal[2]);

    DOPI_SetPDOAddr(&obj->bb, TASK_ID_GRF, PDO_ID_GRF_S3X,    &grfVal[3]);
    DOPI_SetPDOAddr(&obj->bb, TASK_ID_GRF, PDO_ID_GRF_S3Y,    &grfVal[4]);
    DOPI_SetPDOAddr(&obj->bb, TASK_ID_GRF, PDO_ID_GRF_S3Z,    &grfVal[5]);

    DOPI_SetPDOAddr(&obj->bb, TASK_ID_GRF, PDO_ID_GRF_S4X,    &grfVal[6]);
    DOPI_SetPDOAddr(&obj->bb, TASK_ID_GRF, PDO_ID_GRF_S4Y,    &grfVal[7]);
    DOPI_SetPDOAddr(&obj->bb, TASK_ID_GRF, PDO_ID_GRF_S4Z,    &grfVal[8]);

    /* Core */

    /* Exts
    // SDO
    DOPI_SetSDOAddr(&obj->bb, TASK_ID_EXT, SDO_ID_EXT_SET_STATE,     &obj->data.task_ext.state);
    DOPI_SetSDOAddr(&obj->bb, TASK_ID_EXT, SDO_ID_EXT_SET_ROUTINE,   obj->data.task_ext.routines);
    DOPI_SetSDOAddr(&obj->bb, TASK_ID_EXT, SDO_ID_EXT_DC_SET_LENGTH, &obj->data.length_command);
    DOPI_SetSDOAddr(&obj->bb, TASK_ID_EXT, SDO_ID_EXT_DC_SET_DIRECT, &obj->data.lm_dir_command);
    // PDO
    DOPI_SetPDOAddr(&obj->bb, TASK_ID_EXT, PDO_ID_EXT_DC_LENGTH,     &obj->data.length_sensor);
    DOPI_SetPDOAddr(&obj->bb, TASK_ID_EXT, PDO_ID_EXT_DC_SWITCH,     &obj->data.lm_dir_switch);
    if (obj->is_hip == 0) {
    	DOPI_SetPDOAddr(&obj->bb, TASK_ID_EXT, PDO_ID_EXT_FSR, &obj->data.fsr);
    	DOPI_SetPDOAddr(&obj->bb, TASK_ID_EXT, PDO_ID_EXT_LP,  &obj->data.bump);
    }*/
}

/* IO */
static int TxSDO(int MD_idx)
{
	uint16_t md_fdcan_idx = RS_File.MD_setting[MD_idx].FDCAN_ID;

	md_obj[MD_idx].tx_id = 0x200 | (NODE_ID_CM << 4) | md_fdcan_idx;
    return md_obj[MD_idx].tx_fnc(md_obj[MD_idx].tx_id, sdo_msg.txBuf, sdo_msg.msgLength);
}

static int TxPDO(int MD_idx)
{
	uint16_t md_fdcan_idx = RS_File.MD_setting[MD_idx].FDCAN_ID;

	md_obj[MD_idx].tx_id = 0x300 | (NODE_ID_CM << 4) | md_fdcan_idx;
    return md_obj[MD_idx].tx_fnc(md_obj[MD_idx].tx_id, pdo_msg.txBuf, pdo_msg.msgLength);
}

/* Functionalities */
static void SetRoutine(MD_TaskData* task_obj, uint8_t routine_id)
{
    uint8_t idx = task_obj->n_routines;

    if (idx > 0) {
        for (int i = 0; i < idx; ++i) { // Check if the routine is already set
            if (task_obj->routines[i] == routine_id) {
                return;
            }
        }
    }
    if (idx < MD_MAX_ROUTINES) {
        task_obj->routines[idx] = routine_id;
        ++task_obj->n_routines;
    }
}

static void ClearRoutine(MD_TaskData* task_obj)
{
    memset(&task_obj->routines, 0, sizeof(task_obj->routines[0])*MD_MAX_ROUTINES);
    task_obj->n_routines = 0;
}

static void StandbyStates(int MD_idx)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[MD_idx].data.task_lowlevel.state = TASK_STATE_STANDBY;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_SET_STATE, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

//    md_obj[obj_idx].data.task_midlevel.state = TASK_STATE_STANDBY;
//    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_SET_STATE, SDO_REQU, 1);
//    DOPI_AppendSDO(&sdo_unit, &sdo_msg);
//
//
//    md_obj[obj_idx].data.task_msg.state = TASK_STATE_STANDBY;
//    sdo_unit = DOPI_CreateSDOUnit(&md_obj[obj_idx].bb, TASK_ID_MSG,      SDO_ID_MSG_SET_STATE,      SDO_REQU, 1);
//    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(MD_idx);
}

static void EnableStates(int MD_idx)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[MD_idx].data.task_lowlevel.state = TASK_STATE_ENABLE;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_SET_STATE, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[MD_idx].data.task_midlevel.state = TASK_STATE_ENABLE;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_SET_STATE, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[MD_idx].data.task_imu.state = TASK_STATE_ENABLE;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_IMU, SDO_ID_IMU_SET_STATE, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[MD_idx].data.task_msg.state = TASK_STATE_ENABLE;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_MSG,      SDO_ID_MSG_SET_STATE,      SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(MD_idx);
}


static void OffStates(int MD_idx)
{
    DOPI_SDOUnit_t sdo_unit;
    DOPI_ClearSDO(&sdo_msg);


    md_obj[MD_idx].data.task_lowlevel.state = TASK_STATE_OFF;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_LOWLEVEL, SDO_ID_LOWLEVEL_SET_STATE, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[MD_idx].data.task_midlevel.state = TASK_STATE_OFF;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_MIDLEVEL, SDO_ID_MIDLEVEL_SET_STATE, SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    md_obj[MD_idx].data.task_msg.state = TASK_STATE_OFF;
    sdo_unit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_MSG,      SDO_ID_MSG_SET_STATE,      SDO_REQU, 1);
    DOPI_AppendSDO(&sdo_unit, &sdo_msg);

    TxSDO(MD_idx);
}

void SetPDO_1NE(int MD_idx)
{
 	DOPI_SDOUnit_t sdoUnit;
 	DOPI_ClearSDO(&sdo_msg);

 	static uint8_t PDOList[2] = {
 	    			TASK_ID_GAIT, 	   PDO_ID_GAIT_QUATERNION
 	};
 	memcpy(md_obj[MD_idx].data.pdo_list, PDOList, sizeof(PDOList));
 	sdoUnit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_MSG, SDO_ID_MSG_PDO_LIST, SDO_REQU, sizeof(PDOList)/2);
 	DOPI_AppendSDO(&sdoUnit, &sdo_msg);

 	TxSDO(MD_idx);
}

static void SetMDRoutines(int MD_idx)
{
	DOPI_SDOUnit_t sdoUnit;
	DOPI_ClearSDO(&sdo_msg);

	/* (1) Set MSG Routines */
	SetRoutine(&md_obj[MD_idx].data.task_msg, ROUTINE_ID_MSG_PDO_SEND);
    sdoUnit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_MSG, SDO_ID_MSG_SET_ROUTINE, SDO_REQU, 1);
    DOPI_AppendSDO(&sdoUnit, &sdo_msg);

	TxSDO(MD_idx);
}

static void SetMDEnables(int MD_idx)
{
    DOPI_SDOUnit_t sdoUnit;
    DOPI_ClearSDO(&sdo_msg);

    md_obj[MD_idx].data.task_msg.state = TASK_STATE_ENABLE;
    sdoUnit = DOPI_CreateSDOUnit(&md_obj[MD_idx].bb, TASK_ID_MSG, SDO_ID_MSG_SET_STATE, SDO_REQU, 1);
    DOPI_AppendSDO(&sdoUnit, &sdo_msg);

    TxSDO(MD_idx);
}


void SetALLRoutines_1NE(void)
{
	for (int MD_idx = 0; MD_idx < MAX_N_MD; MD_idx++) {
		if (RS_File.MD_setting[MD_idx].usage == 1) {
			SetMDRoutines(MD_idx);
		}
	}
}

void SetALLEnableStates_1NE(void)
{
	for (int MD_idx = 0; MD_idx < MAX_N_MD; MD_idx++) {
		if (RS_File.MD_setting[MD_idx].usage == 1) {
			SetMDEnables(MD_idx);
		}
	}
}

/* RxCallback */
static int FDCAN_Callback(uint16_t wasp_id, uint8_t* rx_data)
{
    uint16_t fnc_code = wasp_id & 0x700;
    uint16_t md_fdcan_idx = (wasp_id & 0x0F0)>>4;

    uint16_t MD_idx = 0;
    for (int i = 0; i < MAX_N_MD; i++)
    {
    	if (RS_File.MD_setting[i].FDCAN_ID == md_fdcan_idx)
    	{
    		MD_idx = i;
    		break;
    	}
    }

    switch(fnc_code){
        case EMCY: break;
        case SDO: DOPI_UnpackSDO(&md_obj[MD_idx].bb, rx_data); break;
        case PDO: DOPI_UnpackPDO(&md_obj[MD_idx].bb, rx_data); break;
        default: break;
    }

    return 0;
}




#endif /* WALKON5_CM_ENABLED */
