
#ifndef DOP_MNGR_INC_DATA_OBJECT_DICTIONARIES_H_
#define DOP_MNGR_INC_DATA_OBJECT_DICTIONARIES_H_

#include <stdint.h>
#include <string.h>

#include "module.h"

/**
 *-----------------------------------------------------------
 *              MACROS AND PREPROCESSOR DIRECTIVES
 *-----------------------------------------------------------
 * @brief Directives and macros for readability and efficiency.
 */

#define DOP_ROUTINE_MAX_NUM 30
#define DOP_SDO_MAX_NUM		80
#define DOP_PDO_MAX_NUM		80

/**
 *------------------------------------------------------------
 *                     TYPE DECLARATIONS
 *------------------------------------------------------------
 * @brief Custom data types and structures for the module.
 */
typedef enum _DOP_NodeID_t{
	NODE_ID_ALL		=	(uint8_t)0x0,		// switch 0000
	NODE_ID_CM	    =	(uint8_t)0x1,		// 0001
	NODE_ID_RH_COR	=	(uint8_t)0x2,		// 0010
	NODE_ID_LH_COR	=	(uint8_t)0x3,		// 0011
	NODE_ID_RH_TRA	=	(uint8_t)0x4,		// 0100
	NODE_ID_LH_TRA	=	(uint8_t)0x5,		// 0101
	NODE_ID_RH_SAG	=	(uint8_t)0x6,		// 0110	Angel Suit&L30 RH
	NODE_ID_LH_SAG	=	(uint8_t)0x7,		// 0111 Angel Suit&L30 LH
	NODE_ID_RK    	=	(uint8_t)0x8,		// 1000 Angel Suit&L30 RK
	NODE_ID_LK  	=	(uint8_t)0x9,		// 1001 Angel Suit&L30 LK
	NODE_ID_RA_MED	=	(uint8_t)0xA,		// 1010 Angel Suit& RA
	NODE_ID_LA_MED	=	(uint8_t)0xB,		// 1011 Angel Suit& LA
	NODE_ID_RA_LAT	=	(uint8_t)0xC,		// 1100
	NODE_ID_LA_LAT	=	(uint8_t)0xD,		// 1101
	NODE_ID_WIDM_R	=	(uint8_t)0xE,		// 1110 WIDM Right
	NODE_ID_WIDM_L	=	(uint8_t)0xF,		// 1111 WIDM Left
} DOP_NodeID_t;

typedef enum _DOP_FNCCode_t{
	EMCY   			= 	((uint16_t)0x000U),
	SYNC   			=	((uint16_t)0x100U),
	SDO    			= 	((uint16_t)0x200U),
	PDO    			= 	((uint16_t)0x300U),
	TRAJECTORY		= 	((uint16_t)0x400U),
	GUI_SYNC		= 	((uint16_t)0x500U),
	QT_BYPASS   	= 	((uint16_t)0x600U),
	SEND_TRAJ		= 	((uint16_t)0x700U),
	AM				= 	((uint16_t)0x800U),
} DOP_FNCCode_t;

typedef enum _DOP_RoutineOnOff_t{
	ROUTINE_OFF = (uint8_t)0,
	ROUTINE_ON 	= (uint8_t)1
} DOP_RoutineOnOff_t;

typedef enum _DOP_DataType_t{
	/* DO NOT CHANGE */
	DOP_CHAR		= 0,
	DOP_UINT8   	= 1,
	DOP_UINT16  	= 2,
	DOP_UINT32  	= 3,
	DOP_INT8    	= 4,
	DOP_INT16   	= 5,
	DOP_INT32   	= 6,
	DOP_FLOAT32 	= 7,
	DOP_FLOAT64 	= 8,
	DOP_STRING10  	= 9
	/* DO NOT CHANGE */
} DOP_DataType_t;

/* ------------------- TASK ID ------------------- */
typedef enum _DOP_TaskID_t{
	/* DO NOT CHANGE */
	TASK_ID_LOWLEVEL = 0,
	TASK_ID_MIDLEVEL,
	TASK_ID_MSG,
	TASK_ID_IMU,
	TASK_ID_GAIT,
	TASK_ID_GRF,
	TASK_ID_SYSMNGT,
	TASK_ID_EXTDEV,
	TASK_NUM
	/* DO NOT CHANGE */
} DOP_TaskID_t;

/* ------------------- SDO ID ------------------- */
typedef enum _DOP_SDOStatus_t{
	SDO_IDLE = 2,
	SDO_REQU = 1,
	SDO_SUCC = 0,
	SDO_FAIL = -1
} DOP_SDOStatus_t;

typedef enum _DOP_SDOID_LowLevel_t{
	SDO_ID_LOWLEVEL_GET_STATE = 0,
	SDO_ID_LOWLEVEL_SET_STATE,
	SDO_ID_LOWLEVEL_GET_ROUTINE,
	SDO_ID_LOWLEVEL_SET_ROUTINE,
	SDO_ID_LOWLEVEL_NAME,
	SDO_ID_LOWLEVEL_POLE_PAIR,
	SDO_ID_LOWLEVEL_ENCODER_RESOLUTION,
	SDO_ID_LOWLEVEL_GEAR_RATIO,
	SDO_ID_LOWLEVEL_TORQUE_CONSTANT,
	SDO_ID_LOWLEVEL_VELOCITY_CONSTANT,
	SDO_ID_LOWLEVEL_PEAK_CURRENT_LIMIT,
	SDO_ID_LOWLEVEL_CONTINUOUS_CURRENT_LIMIT,
	SDO_ID_LOWLEVEL_MAX_VELOCITY,
	SDO_ID_LOWLEVEL_COMMUTATION_DUTY,
	SDO_ID_LOWLEVEL_USER_DIRECTION,
	SDO_ID_LOWLEVEL_ELEC_SYSTEM_ID_MAG,
	SDO_ID_LOWLEVEL_TERMINAL_RESISTANCE,
	SDO_ID_LOWLEVEL_TERMINAL_INDUCTANCE,
	SDO_ID_LOWLEVEL_BEMF_ID_VELOCITY,
	SDO_ID_LOWLEVEL_BEMF_ID_GAIN_PCTG,
	SDO_ID_LOWLEVEL_CURRENT_CTRL_BW_RAD,
	SDO_ID_LOWLEVEL_INERTIA,
	SDO_ID_LOWLEVEL_DAMPING_COEF,
	SDO_ID_LOWLEVEL_MECH_MODEL_A,
	SDO_ID_LOWLEVEL_MECH_MODEL_B,
	SDO_ID_LOWLEVEL_FRICTION_ID_INFO,
	SDO_ID_LOWLEVEL_FRICTION_LUT_INFO,
	SDO_ID_LOWLEVEL_SET_COMMUTATION_SENSOR,
	SDO_ID_LOWLEVEL_SET_POS_FEEDBACK_SENSOR,
	SDO_ID_LOWLEVEL_SET_E_ANGLE_HOMING_SENSOR,
	SDO_ID_LOWLEVEL_SET_M_ANGLE_HOMING_SENSOR,
	SDO_ID_LOWLEVEL_SET_SENSOR_USAGE,
	SDO_ID_LOWLEVEL_SET_AUX_INPUT,

	SDO_ID_LOWLEVEL_NUM
} DOP_SDOID_LowLevel_t;

typedef enum _DOP_SDOID_MidLevel_t{
	SDO_ID_MIDLEVEL_GET_STATE = 0,
	SDO_ID_MIDLEVEL_SET_STATE,
	SDO_ID_MIDLEVEL_GET_ROUTINE,
	SDO_ID_MIDLEVEL_SET_ROUTINE,

	SDO_ID_MIDLEVEL_IRC_NUMERATOR_LENGTH,
	SDO_ID_MIDLEVEL_IRC_DENOMINATOR_LENGTH,
	SDO_ID_MIDLEVEL_IRC_NUMERATOR,
	SDO_ID_MIDLEVEL_IRC_DENOMINATOR,
	SDO_ID_MIDLEVEL_IRC_SATURATION,

	SDO_ID_MIDLEVEL_IMP_VIRTUAL_STIFFNESS,
	SDO_ID_MIDLEVEL_IMP_VIRTUAL_DAMPER,

	SDO_ID_MIDLEVEL_CURRENT_PERIODIC_SIG_INFO,
	SDO_ID_MIDLEVEL_VELOCITY_PERIODIC_SIG_INFO,
	SDO_ID_MIDLEVEL_POSITION_PERIODIC_SIG_INFO,

	SDO_ID_MIDLEVEL_DOB_Q_BW,
	SDO_ID_MIDLEVEL_DOB_GQ_NUM,
	SDO_ID_MIDLEVEL_DOB_GQ_DEN,
	SDO_ID_MIDLEVEL_DOB_Q_NUM,
	SDO_ID_MIDLEVEL_DOB_Q_DEN,
	SDO_ID_MIDLEVEL_DOB_SATURATION,

	SDO_ID_MIDLEVEL_VELOCITY_CTRL_BW,
	SDO_ID_MIDLEVEL_VELOCITY_CTRL_P_GAIN,
	SDO_ID_MIDLEVEL_VELOCITY_CTRL_I_GAIN,
	SDO_ID_MIDLEVEL_POSITION_CTRL_INPUT_PENALTY,
	SDO_ID_MIDLEVEL_POSITION_CTRL_P_GAIN,
	SDO_ID_MIDLEVEL_POSITION_CTRL_D_GAIN,
	SDO_ID_MIDLEVEL_MID_CTRL_SATURATION,
	SDO_ID_MIDLEVEL_INCENCODER_SET_OFFSET,
	SDO_ID_MIDLEVEL_ABSENCODER1_SET_OFFSET,
	SDO_ID_MIDLEVEL_ABSENCODER1_CHANGE_DIRECTION,
	SDO_ID_MIDLEVEL_ABSENCODER2_SET_OFFSET,
	SDO_ID_MIDLEVEL_ABSENCODER2_CHANGE_DIRECTION,
	SDO_ID_MIDLEVEL_VSD_STIFFNESS,
	SDO_ID_MIDLEVEL_VSD_DAMPER,
	SDO_ID_MIDLEVEL_VSD_DAMPED_RANGE,
	SDO_ID_MIDLEVEL_VSD_STIFF_RANGE,
	SDO_ID_MIDLEVEL_SET_VSD_UPPER_LIMIT,
	SDO_ID_MIDLEVEL_SET_VSD_LOWER_LIMIT,
	SDO_ID_MIDLEVEL_VSD_SATURATION,
	SDO_ID_MIDLEVEL_FEEDFORWARD_NUM,
	SDO_ID_MIDLEVEL_FEEDFORWARD_DEN,
	SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR,
	SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR_LEAD_LAG,
	SDO_ID_MIDLEVEL_ENCODER_RESOLUTION,
	SDO_ID_MIDLEVEL_SYSTEM_ID_SBS_INFO,
	SDO_ID_MIDLEVEL_SYSTEM_ID_VERIFICATION_MAG,
	SDO_ID_MIDLEVEL_P_VECTOR_YD,
	SDO_ID_MIDLEVEL_P_VECTOR_L,
	SDO_ID_MIDLEVEL_P_VECTOR_S0,
	SDO_ID_MIDLEVEL_P_VECTOR_SD,
	SDO_ID_MIDLEVEL_F_VECTOR_MODE_IDX,
	SDO_ID_MIDLEVEL_F_VECTOR_TMAX,
	SDO_ID_MIDLEVEL_F_VECTOR_DELAY,
	SDO_ID_MIDLEVEL_I_VECTOR_EPSILON,
	SDO_ID_MIDLEVEL_I_VECTOR_KP,
	SDO_ID_MIDLEVEL_I_VECTOR_KD,
	SDO_ID_MIDLEVEL_I_VECTOR_LAMBDA,
	SDO_ID_MIDLEVEL_I_VECTOR_DURATION,
	SDO_ID_MIDLEVEL_I_VECTOR_KP_MAX,
	SDO_ID_MIDLEVEL_I_VECTOR_KD_MAX,
	SDO_ID_MIDLEVEL_I_VECTOR_OPTION,
	SDO_ID_MIDLEVEL_DESIRED_MECH_ANGLE,
	SDO_ID_MIDLEVEL_ABSENCODER1_LOCATION,
	SDO_ID_MIDLEVEL_ABSENCODER2_LOCATION,
	SDO_ID_MIDLEVEL_C_VECTOR_FF_GAIN,
	SDO_ID_MIDLEVEL_C_VECTOR_PD_GAIN,
	SDO_ID_MIDLEVEL_C_VECTOR_IC_GAIN,
	SDO_ID_MIDLEVEL_C_VECTOR_DOB_GAIN,
	SDO_ID_MIDLEVEL_C_VECTOR_IRC_GAIN,
	SDO_ID_MIDLEVEL_C_VECTOR_FC_GAIN,
	SDO_ID_MIDLEVEL_TEST_CONTROL_TIME,
	SDO_ID_MIDLEVEL_TEST_COMM_TIME,

	SDO_ID_MIDLEVEL_NUM
} DOP_SDOID_MidLevel_t;

typedef enum _DOP_SDOID_Msg_t{
	SDO_ID_MSG_GET_STATE = 0,
	SDO_ID_MSG_SET_STATE,
	SDO_ID_MSG_GET_ROUTINE,
	SDO_ID_MSG_SET_ROUTINE,
	SDO_ID_MSG_PDO_LIST,
	SDO_ID_MSG_MS_ENUM,
	SDO_ID_MSG_GUI_COMM_ONOFF,
	SDO_ID_MSG_GUI_COMM_COMMAND,
	SDO_ID_MSG_SYNCH_MODE_ONOFF,
	SDO_ID_MSG_GUI_QT_DETECT,
	SDO_ID_MSG_GUI_QT_ID_RECEIVE,
	SDO_ID_MSG_MD_PDO_ENABLE,
	SDO_ID_MSG_MD_SEND_TRAJ,
	SDO_ID_MSG_MD_DC_LENGTH_COMMAND,

	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_MSG_NUM
} DOP_SDOID_Msg_t;

typedef enum _DOP_SDOID_IMU_t{
	SDO_ID_IMU_GET_STATE = 0,
	SDO_ID_IMU_SET_STATE,
	SDO_ID_IMU_GET_ROUTINE,
	SDO_ID_IMU_SET_ROUTINE,
	SDO_ID_IMU_FOR_TEST,
	SDO_ID_IMU_MAG_INVA,
	SDO_ID_IMU_MAG_IRON_ERROR,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_IMU_NUM
} DOP_SDOID_IMU_t;

typedef enum _DOP_SDOID_Gait_t{
	SDO_ID_GAIT_GET_STATE = 0,
	SDO_ID_GAIT_SET_STATE,
	SDO_ID_GAIT_GET_ROUTINE,
	SDO_ID_GAIT_SET_ROUTINE,
	SDO_ID_GAIT_FOR_TEST,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_GAIT_NUM
} DOP_SDOID_Gait_t;

typedef enum _DOP_SDOID_GRF_t{
	SDO_ID_GRF_GET_STATE = 0,
	SDO_ID_GRF_SET_STATE,
	SDO_ID_GRF_GET_ROUTINE,
	SDO_ID_GRF_SET_ROUTINE,
	SDO_ID_GRF_FOR_TEST,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_GRF_NUM
} DOP_SDOID_GRF_t;

typedef enum _DOP_SDOID_SysMngt_t{
	SDO_ID_SYSMNGT_GET_STATE = 0,
	SDO_ID_SYSMNGT_SET_STATE,
	SDO_ID_SYSMNGT_GET_ROUTINE,
	SDO_ID_SYSMNGT_SET_ROUTINE,
	SDO_ID_SYSMNGT_FOR_TEST,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_SYSMNGT_NUM
} DOP_SDOID_SysMngt_t;

typedef enum _DOP_SDOID_ExtDev_t{
	SDO_ID_EXTDEV_GET_STATE = 0,
	SDO_ID_EXTDEV_SET_STATE,
	SDO_ID_EXTDEV_GET_ROUTINE,
	SDO_ID_EXTDEV_SET_ROUTINE,
	SDO_ID_EXTDEV_DC_SET_LENGTH,
	SDO_ID_EXTDEV_DC_SET_DIRECT,
	SDO_ID_EXTDEV_FOR_TEST,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_EXTDEV_NUM
} DOP_SDOID_ExtDev_t;

/* ------------------- PDO ID ------------------- */
typedef enum _DOP_PDOID_LowLevel_t{
	PDO_ID_LOWLEVEL_3PHASES_CURRENT_RAW,
	PDO_ID_LOWLEVEL_3PHASES_CURRENT_KF,
	PDO_ID_LOWLEVEL_3PHASES_VOLTAGE_RAW,
	PDO_ID_LOWLEVEL_3PHASES_VOLTAGE_KF,
	PDO_ID_LOWLEVEL_POSITION,
	PDO_ID_LOWLEVEL_VELOCITY,
	PDO_ID_LOWLEVEL_CLARKE_OUT,
	PDO_ID_LOWLEVEL_PARK_OUT,
	PDO_ID_LOWLEVEL_VOLTAGE_IN,
	PDO_ID_LOWLEVEL_ELEC_ANGLE,
	PDO_ID_LOWLEVEL_PRBS_DATA,

	PDO_ID_LOWLEVEL_TOTAL_CURRENT_INPUT,
	PDO_ID_LOWLEVEL_CURRENT_OUTPUT,

	PDO_ID_LOWLEVEL_AUXILIARY_INPUT,
	PDO_ID_LOWLEVEL_F_VECTOR_INPUT,
	PDO_ID_LOWLEVEL_LOW_ID_PROCESS_INPUT,
	PDO_ID_LOWLEVEL_FRICTION_COMPENSATOR_INPUT,
	PDO_ID_LOWLEVEL_MID_ID_PROCESS_INPUT,
	PDO_ID_LOWLEVEL_IRC_INPUT,
	PDO_ID_LOWLEVEL_MID_CTRL_INPUT,
	PDO_ID_LOWLEVEL_ANALYZER_INPUT,

	PDO_ID_LOWLEVEL_COMMUTATION_STEP,
	PDO_ID_LOWLEVEL_FRICTION_ID_REF,
	PDO_ID_LOWLEVEL_HALL_SENSOR_SIG,
	PDO_ID_LOWLEVEL_HALL_SENSOR_LOGIC,

	PDO_ID_LOWLEVEL_NUM
} DOP_PDOID_LowLevel_t;

typedef enum _DOP_PDOID_MidLevel_t{
	PDO_ID_MIDLEVEL_LOOP_CNT,
	PDO_ID_MIDLEVEL_REF_POSITION,
	PDO_ID_MIDLEVEL_REF_VELOCITY,
	PDO_ID_MIDLEVEL_ACTUAL_POSITION,
	PDO_ID_MIDLEVEL_ACTUAL_VELOCITY_RAW,
	PDO_ID_MIDLEVEL_SYSTEM_ID_SBS_FREQ,
	PDO_ID_MIDLEVEL_IMP_CTRL_INPUT,
	PDO_ID_MIDLEVEL_POS_PID_CTRL_INPUT,
	PDO_ID_MIDLEVEL_VEL_PID_CTRL_INPUT,
	PDO_ID_MIDLEVEL_VSD_INPUT,
	PDO_ID_MIDLEVEL_UNIT_TRAJECTORY_BUFF_COUNT,
	PDO_ID_MIDLEVEL_F_VECTOR_INPUT,
	PDO_ID_MIDLEVEL_ABSENCODER1_POSITION,
	PDO_ID_MIDLEVEL_ABSENCODER2_POSITION,
	PDO_ID_MIDLEVEL_DOB_DISTURABNCE,
	PDO_ID_MIDLEVEL_DOB_INPUT,
	PDO_ID_MIDLEVEL_FF_INPUT,
	PDO_ID_MIDLEVEL_VELOCITY_ESTIMATED,
	PDO_ID_MIDLEVEL_IMP_EPSILON,
	PDO_ID_MIDLEVEL_IMP_KP,
	PDO_ID_MIDLEVEL_IMP_KD,
	PDO_ID_MIDLEVEL_IMP_LAMDA,
	PDO_ID_MIDLEVEL_REF_POSITION1, // position_reference(k+1)
	PDO_ID_MIDLEVEL_REF_POSITION2, // position_reference(k+2)
	PDO_ID_MIDLEVEL_NUM
} DOP_PDOID_MidLevel_t;

typedef enum _DOP_PDOID_Msg_t{
	/* USER CODE START*/
	PDO_ID_MSG_TEST1,
	PDO_ID_MSG_TEST2,
	PDO_ID_MSG_TEST3,
	PDO_ID_MSG_TEST4,
	PDO_ID_MSG_TEST5,
	PDO_ID_MSG_TEST6,
	PDO_ID_MSG_TEST7,
	PDO_ID_MSG_TEST8,
	PDO_ID_MSG_TEST9,
	PDO_ID_MSG_TEST10,
	/* USER CODE STOP*/
	PDO_ID_MSG_NUM
} DOP_PDOID_Msg_t;

typedef enum _DOP_PDOID_IMU_t{
	/* USER CODE START*/
	PDO_ID_IMU_ROLL,
	PDO_ID_IMU_PITCH,
	PDO_ID_IMU_YAW,

	PDO_ID_IMU_ACC_X,
	PDO_ID_IMU_ACC_Y,
	PDO_ID_IMU_ACC_Z,
	PDO_ID_IMU_GYR_X,
	PDO_ID_IMU_GYR_Y,
	PDO_ID_IMU_GYR_Z,
	PDO_ID_IMU_MAG_X,
	PDO_ID_IMU_MAG_Y,
	PDO_ID_IMU_MAG_Z,

	PDO_ID_IMU_ACC_XYZ,
	PDO_ID_IMU_GYR_XYZ,
	PDO_ID_IMU_MAG_XYZ,
	PDO_ID_IMU_MAG_CALIB_XYZ,

	PDO_ID_IMU_ACC_GYR_XYZ,
	PDO_ID_IMU_QUATERNION,

	/* USER CODE STOP*/
	PDO_ID_IMU_NUM
} DOP_PDOID_IMU_t;

typedef enum _DOP_PDOID_Gait_t{
	/* USER CODE START*/
	/* For SUIT series */
	PDO_ID_GAIT_DEG,
	PDO_ID_GAIT_VEL,

	PDO_ID_GAIT_DEG_INC,
	PDO_ID_GAIT_VEL_INC,
	
	PDO_ID_GAIT_GYR_Z,

	PDO_ID_GAIT_QUATERNION,
	/* USER CODE STOP*/
	PDO_ID_GAIT_NUM
} DOP_PDOID_Gait_t;

typedef enum _DOP_PDOID_GRF_t{
	/* USER CODE START*/
	PDO_ID_GRF_S2X,
	PDO_ID_GRF_S2Y,
	PDO_ID_GRF_S2Z,

	PDO_ID_GRF_S3X,
	PDO_ID_GRF_S3Y,
	PDO_ID_GRF_S3Z,

	PDO_ID_GRF_S4X,
	PDO_ID_GRF_S4Y,
	PDO_ID_GRF_S4Z,
	/* USER CODE STOP*/
	PDO_ID_GRF_NUM
} DOP_PDOID_GRF_t;

typedef enum _DOP_PDOID_SysMngt_t{
	/* USER CODE START*/
	PDO_ID_SYSTEM_VOLT,
	PDO_ID_SYSTEM_CURR,
	PDO_ID_SYSTEM_TEMP,
	PDO_ID_SYSTEM_PCTG,
	/* USER CODE STOP*/
	PDO_ID_SYSMNGT_NUM
} DOP_PDOID_SysMngt_t;

typedef enum _DOP_PDOID_ExtDev_t{
	PDO_ID_EXTDEV_FSR,
	PDO_ID_EXTDEV_LP,
	PDO_ID_EXTDEV_DC_LENGTH_REF,
	PDO_ID_EXTDEV_DC_DIRECTION_CMD,
	PDO_ID_EXTDEV_DC_LENGTH_ACT,
	PDO_ID_EXTDEV_DC_DIRECTION_ACT,
	PDO_ID_EXTDEV_DC_BUTTON_STATE,
	PDO_ID_EXTDEV_NTC_MOTOR_TEMP,
	/* USER CODE START*/

	/* USER CODE STOP*/
	PDO_ID_EXTDEV_NUM
} DOP_PDOID_ExtDev_t;

/* ------------------- ROUTINE ID ------------------- */
typedef enum _DOP_RoutID_LowLevel_t{
	ROUTINE_ID_LOWLEVEL_COMMUTATION_SET,
	ROUTINE_ID_LOWLEVEL_ELECTRICAL_SYS_ID,
	ROUTINE_ID_LOWLEVEL_ELECTRICAL_BEMF_ID,
	ROUTINE_ID_LOWLEVEL_CURRENT_CTRL,
	ROUTINE_ID_LOWLEVEL_CURRENT_CTRL_BANDWIDTH_CHECK,
	ROUTINE_ID_LOWLEVEL_ADVANCED_FRICTION_ID,
	ROUTINE_ID_LOWLEVEL_ADV_FRICTION_COMPENSATION,
	ROUTINE_ID_LOWLEVEL_ADV_FRICTION_ID_VEL_CTRL_EVAL,
	ROUTINE_ID_LOWLEVEL_ADV_FRICTION_COMPENSATION_FF,

	ROUTINE_ID_LOWLEVEL_NUM
} DOP_RoutID_LowLevel_t;

typedef enum _DOP_RoutID_MidLevel_t{
	ROUTINE_ID_MIDLEVEL_SYS_ID_SBS,
	ROUTINE_ID_MIDLEVEL_IRC,
	ROUTINE_ID_MIDLEVEL_IMPEDANCE_CONTROL,
	ROUTINE_ID_MIDLEVEL_POSITION_REC_REF,
	ROUTINE_ID_MIDLEVEL_POSITION_SINE_REF,

	ROUTINE_ID_MIDLEVEL_POSITION_CTRL,
	ROUTINE_ID_MIDLEVEL_VELOCITY_CTRL,
    ROUTINE_ID_MIDLEVEL_VELOCITY_SINE_REF,
	ROUTINE_ID_MIDLEVEL_VELOCITY_REC_REF,

	ROUTINE_ID_MIDLEVEL_CURRENT_SINE_REF,
	ROUTINE_ID_MIDLEVEL_CURRENT_REC_REF,
	ROUTINE_ID_MIDLEVEL_CURRENT_TANH_REF,

	ROUTINE_ID_MIDLEVEL_GET_HALL_SENSOR_VALUE,
	ROUTINE_ID_MIDLEVEL_GET_INCENCODER_VALUE,
	ROUTINE_ID_MIDLEVEL_GET_ABSENCODER1_VALUE,
	ROUTINE_ID_MIDLEVEL_GET_ABSENCODER2_VALUE,

	ROUTINE_ID_MIDLEVEL_COMPRESSIONAL_VSD,
	ROUTINE_ID_MIDLEVEL_BACKLASH_TEST,
	ROUTINE_ID_MIDLEVEL_DISTURBANCE_OBS,
	ROUTINE_ID_MIDLEVEL_P_VECTOR_DECODER,
	ROUTINE_ID_MIDLEVEL_F_VECTOR_DECODER,
	ROUTINE_ID_MIDLEVEL_FEEDFORWARD_FILTER,
	ROUTINE_ID_MIDLEVEL_SYS_ID_SBS_VERIFY,

	ROUTINE_ID_MIDLEVEL_CORRIDOR_IMPEDANCE_CONTROL,

	/* USER CODE STOP*/
	ROUTINE_ID_MIDLEVEL_NUM
} DOP_RoutID_MidLevel_t;

typedef enum _DOP_RoutID_Msg_t{
	/* USER CODE START*/
	ROUTINE_ID_MSG_PDO_SEND,
	ROUTINE_ID_MSG_PDO_DUMMY_TEST,

	/* USER CODE STOP*/
	ROUTINE_ID_MSG_NUM
} DOP_RoutID_Msg_t;

typedef enum _DOP_RoutID_IMU_t{
	/* USER CODE START*/
	ROUTINE_ID_IMU_6AXIS_GETVALUE,
	ROUTINE_ID_IMU_3AXIS_GETVALUE,
	ROUTINE_ID_IMU_RPY_CAL,
	ROUTINE_ID_IMU_MAGNET_GETVALUE,
	ROUTINE_ID_IMU_QUATERNION,

	/* USER CODE STOP*/
	ROUTINE_ID_IMU_NUM
} DOP_RoutID_IMU_t;

typedef enum _DOP_RoutID_Gait_t{
	/* USER CODE START*/
	ROUTINE_ID_GAIT_WALKING_STATE,
	ROUTINE_ID_GAIT_TOTAL_FUNCTION,

	/* USER CODE STOP*/
	ROUTINE_ID_GAIT_NUM
} DOP_RoutID_Gait_t;

typedef enum _DOP_RoutID_SysMngt_t{
	/* USER CODE START*/
	ROUTINE_ID_SYSMNGT_GET_POWER_VALUE,
	ROUTINE_ID_SYSMNGT_CHECK_POWER_STATE,
	ROUTINE_ID_SYSMNGT_RUN_STATUS_LED,
	ROUTINE_ID_SYSMNGT_RUN_BATTERY_LED,
	ROUTINE_ID_SYSMNGT_RUN_BUZZER,
	ROUTINE_ID_SYSMNGT_POWER_ON_SEQ,

	/* USER CODE STOP*/
	ROUTINE_ID_SYSMNGT_NUM
} DOP_RoutID_SysMngt_t;

typedef enum _DOP_RoutID_ExtDev_t{
	ROUTINE_ID_EXTDEV_FOOT,
	ROUTINE_ID_EXTDEV_NTC,
	ROUTINE_ID_EXTDEV_DC_LENGTH_UPDATE,
	ROUTINE_ID_EXTDEV_DC_LENGTH_CMD,
	ROUTINE_ID_EXTDEV_DC_DIRECT_CMD,
	ROUTINE_ID_EXTDEV_DC_BUTTON_CMD,
	ROUTINE_ID_EXTDEV_DC_BUTTON_STATE,
	/* USER CODE START*/

	/* USER CODE STOP*/
	ROUTINE_ID_EXTDEV_NUM
} DOP_RoutID_ExtDev_t;

typedef uint8_t SDOInfo_t;			    // ObjectDictionary_DataTypeEnum
typedef uint8_t PDOInfo_t[2];			// ObjectDictionary_DataTypeEnum, number of data


/**
 *------------------------------------------------------------
 *                      GLOBAL VARIABLES
 *------------------------------------------------------------
 * @brief Extern declarations for global variables.
 */

extern SDOInfo_t SDOTable[TASK_NUM][DOP_SDO_MAX_NUM];
extern PDOInfo_t PDOTable[TASK_NUM][DOP_PDO_MAX_NUM];


/**
 *------------------------------------------------------------
 *                     FUNCTION PROTOTYPES
 *------------------------------------------------------------
 * @brief Function prototypes declaration for this module.
 */

uint8_t DOP_ConvertDataSize(int t_dataType);
void DOP_CreateSDOTable(void);
void DOP_CreatePDOTable(void);


#endif /* DOP_MNGR_INC_DATA_OBJECT_DICTIONARIES_H_ */
